name: Release Service Portal

on:
  push:
    branches: ['main']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  KUBECONFIG: .kube/config
  KUBECONFIG_FILE: ${{ secrets.KUBECONFIG }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    environment: release 
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          secrets: |
            npm_token=${{ secrets.NPM_TOKEN }}
      
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
  deploy_main:
    environment: release
    needs: build-and-push-image
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Set up Kubernetes config
        run: |
          mkdir -p .kube
          echo "${{ secrets.KUBECONFIG }}" > $KUBECONFIG

      - name: Create K8s secret for SMTP_API_KEY
        run: |
          kubectl create secret generic ts4nfdi-service-portal-smtp-api-key \
            --from-literal=SMTP_API_KEY=${{ secrets.SMTP_API_KEY }} \
            --namespace='ts4nfdi' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create K8s secret for SMTP_USERNAME
        run: |
          kubectl create secret generic ts4nfdi-service-portal-smtp-username \
            --from-literal=SMTP_USERNAME=${{ secrets.SMTP_USERNAME }} \
            --namespace='ts4nfdi' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create K8s secret for SMTP_PASSWORD
        run: |
          kubectl create secret generic ts4nfdi-service-portal-smtp-password \
            --from-literal=SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }} \
            --namespace='ts4nfdi' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create K8s secret for CAPTCHA_VALIDATION_URL
        run: |
          kubectl create secret generic ts4nfdi-service-portal-captcha-validation-url \
            --from-literal=CAPTCHA_VALIDATION_URL=${{ secrets.CAPTCHA_VALIDATION_URL }} \
            --namespace='ts4nfdi' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create K8s secret for CAPTCHA_API_KEY
        run: |
          kubectl create secret generic ts4nfdi-service-portal-captcha-api-key \
            --from-literal=CAPTCHA_API_KEY=${{ secrets.CAPTCHA_API_KEY }} \
            --namespace='ts4nfdi' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create K8s secret for AUTH_SECRET
        run: |
          kubectl create secret generic ts4nfdi-service-portal-auth-secret \
            --from-literal=AUTH_SECRET=${{ secrets.AUTH_SECRET }} \
            --namespace='ts4nfdi' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create K8s secret for CONTACT_RECV_EMAIL
        run: |
          kubectl create secret generic ts4nfdi-service-portal-contact-recv-email \
            --from-literal=CONTACT_RECV_EMAIL=${{ secrets.CONTACT_RECV_EMAIL }} \
            --namespace='ts4nfdi' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to Kubernetes
        uses: stefanprodan/kube-tools@v1
        with:
          helmv3: 3.12.0
          command: |
            kubectl get nodes
            helmv3 repo add service-portal-deployment https://ts4nfdi.github.io/service-portal-deployment/
            helmv3 repo update
            helmv3 upgrade ts4nfdi-service-portal \
              --install \
              --namespace='ts4nfdi' \
              --set-json='ingress.dns="ts4nfdi-service-portal.qa.km.k8s.zbmed.de"'  \
              --set-json='images.ui="ghcr.io/ts4nfdi/service-portal:main"' \
              --set-json='ingress.path="/"' \
              --set-json='ui.GATEWAY_BASE_URL="https://ts4nfdi-api-gateway.prod.km.k8s.zbmed.de/api-gateway"' \
              --set-json='ui.SMTP_HOST_NAME="smtp.mailgun.org"' \
              --set-json='ui.SMTP_PORT="\"587\""' \
              --set-json='ui.SERVICE_EMAIL="brad@sandboxbccd49a83c3742bcb00d487d6018d9ea.mailgun.org"' \
              service-portal-deployment/service-portal-ui
