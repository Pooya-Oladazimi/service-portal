name: Deployment to production
concurrency: production
on:
  workflow_dispatch:
    inputs:
      tags:
        description: 'Do you really want to update the production instance'
        required: false
        type: boolean
      image_sha:
        description: 'Image SHA ID, Optional '
        type: string
        required: false

env:
  KUBECONFIG: .kube/config
  KUBECONFIG_FILE: ${{ secrets.KUBECONFIG_PROD }}

jobs:
  deploy_main:
    environment: release-k8s
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Kubernetes config
        run: |
          mkdir -p .kube
          echo "${{ env.KUBECONFIG_FILE }}" > $KUBECONFIG

      - name: Create K8s secret for SMTP_API_KEY
        run: |
          kubectl create secret generic ts4nfdi-service-portal-smtp-api-key \
            --from-literal=SMTP_API_KEY=${{ secrets.SMTP_API_KEY }} \
            --namespace='ts4nfdi' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create K8s secret for SMTP_USERNAME
        run: |
          kubectl create secret generic ts4nfdi-service-portal-smtp-username \
            --from-literal=SMTP_USERNAME=${{ secrets.SMTP_USERNAME }} \
            --namespace='ts4nfdi' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create K8s secret for SMTP_PASSWORD
        run: |
          kubectl create secret generic ts4nfdi-service-portal-smtp-password \
            --from-literal=SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }} \
            --namespace='ts4nfdi' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create K8s secret for SMTP_PORT
        run: |
          kubectl create secret generic ts4nfdi-service-portal-smtp-port \
            --from-literal=SMTP_PASSWORD=${{ vars.SMTP_PORT }} \
            --namespace='ts4nfdi' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create K8s secret for CAPTCHA_VALIDATION_URL
        run: |
          kubectl create secret generic ts4nfdi-service-portal-captcha-validation-url \
            --from-literal=CAPTCHA_VALIDATION_URL=${{ secrets.CAPTCHA_VALIDATION_URL }} \
            --namespace='ts4nfdi' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create K8s secret for CAPTCHA_API_KEY
        run: |
          kubectl create secret generic ts4nfdi-service-portal-captcha-api-key \
            --from-literal=CAPTCHA_API_KEY=${{ secrets.CAPTCHA_API_KEY }} \
            --namespace='ts4nfdi' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create K8s secret for AUTH_SECRET
        run: |
          kubectl create secret generic ts4nfdi-service-portal-auth-secret \
            --from-literal=AUTH_SECRET=${{ secrets.AUTH_SECRET }} \
            --namespace='ts4nfdi' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create K8s secret for CONTACT_RECV_EMAIL
        run: |
          kubectl create secret generic ts4nfdi-service-portal-contact-recv-email \
            --from-literal=CONTACT_RECV_EMAIL=${{ vars.CONTACT_RECV_EMAIL }} \
            --namespace='ts4nfdi' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create K8s secret for SMTP_HOST_NAME
        run: |
          kubectl create secret generic ts4nfdi-service-portal-smtp-host-name \
            --from-literal=SMTP_HOST_NAME=${{ vars.SMTP_HOST_NAME }} \
            --namespace='ts4nfdi' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create K8s secret for SERVICE_EMAIL
        run: |
          kubectl create secret generic ts4nfdi-service-portal-smtp-service-email \
            --from-literal=SERVICE_EMAIL=${{ vars.SERVICE_EMAIL }} \
            --namespace='ts4nfdi' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create K8s secret for GATEWAY_BASE_URL
        run: |
          kubectl create secret generic ts4nfdi-service-portal-gateway-base-url \
            --from-literal=GATEWAY_BASE_URL=${{ vars.GATEWAY_BASE_URL }} \
            --namespace='ts4nfdi' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to Kubernetes
        uses: stefanprodan/kube-tools@v1
        with:
          helmv3: 3.12.0
          command: |
            helmv3 repo add service-portal-deployment https://ts4nfdi.github.io/service-portal-deployment/
            helmv3 repo update
            helmv3 upgrade ts4nfdi-service-portal  \
            --install \
            --namespace='ts4nfdi' \
            --set-json='ingress.dns="ts4nfdi-service-portal.prod.km.k8s.zbmed.de"'  \
            --set-json='images.ui="ghcr.io/ts4nfdi/service-portal:main"' \
            --set-json='ingress.path="/"' \
            service-portal-deployment/service-portal-ui
